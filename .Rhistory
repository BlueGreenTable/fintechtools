select(Gas_Date, Empress) %>%
rename(Empress_{{year}} = Empress)
# Loop through each year
for (year in years) {
# Filter and rename columns for the current year
emp_df <- final_data %>%
filter(Year == as.character(year)) %>%
select(Gas_Date, Empress) %>%
rename(Empress_{{year}} = Empress)
library(dplyr)
# Assuming your final_data is a data frame
# Create an empty list to store filtered and renamed data frames
empress_list <- list()
# Define the years for which you want to filter and rename
years <- c(2018, 2019)
# Loop through each year
for (year in years) {
# Filter and rename columns for the current year
emp_df <- final_data %>%
filter(Year == as.character(year)) %>%
select(Gas_Date, Empress) %>%
rename(!!paste0("Empress_", year) := Empress)
# Append the result to the list
empress_list[[as.character(year)]] <- emp_df
}
final_data
final_data <- final_data %>% dplyr::mutate(
across(.col = c("Empress",
"McNeill",
"Alberta_BC",
"Gordondale",
"Groundbirch",
"Other",
"Total_Export_Deliveries_(Gross)",
"Intraprovincial",
"Total_Storage_+_Intraprovincial",
"Total_Net_Storage",
"Total_Storage_Deliveries",
"Total_Storage_Receipts",
"Total_NGTL_Deliveries",
"Total_NGTL_Receipts",
"NGTL_Field_Receipts",
"End_of_Day_Linepack",
"Linepack_Rate_of_Change",
"Linepack_Change_(Last_24_Hours)",
"Linepack_Target",
"Total_SD_Account_(TJ)",
"Total_OBA_Account_(TJ)"),
.fns = parse_number))
# Data wrangling - Remove commas, and convert to numeric
final_data <- subset(final_data, select = -c(1))
final_data <- final_data %>% dplyr::mutate(
across(.col = c("Empress",
"McNeill",
"Alberta_BC",
"Gordondale",
"Groundbirch",
"Other",
"Total_Export_Deliveries_(Gross)",
"Intraprovincial",
"Total_Storage_+_Intraprovincial",
"Total_Net_Storage",
"Total_Storage_Deliveries",
"Total_Storage_Receipts",
"Total_NGTL_Deliveries",
"Total_NGTL_Receipts",
"NGTL_Field_Receipts",
"End_of_Day_Linepack",
"Linepack_Rate_of_Change",
"Linepack_Change_(Last_24_Hours)",
"Linepack_Target",
"Total_SD_Account_(TJ)",
"Total_OBA_Account_(TJ)"),
.fns = parse_number))
# Data Wrangling
colnames(final_data) <- c(
"Date",
"Gas_Date",
"Volume_Summary",
"Empress",
"McNeill",
"Alberta_BC",
"Gordondale",
"Groundbirch",
"Other",
"Total_Export_Deliveries_(Gross)",
"Intraprovincial",
"Total_Storage_+_Intraprovincial",
"Total_Net_Storage",
"Total_Storage_Deliveries",
"Total_Storage_Receipts",
"Total_NGTL_Deliveries",
"Total_NGTL_Receipts",
"NGTL_Field_Receipts",
"End_of_Day_Linepack",
"Linepack_Rate_of_Change",
"Linepack_Change_(Last_24_Hours)",
"Linepack_Target",
"Tolerance",
"Tolerance_Last_Changed",
"Total_SD_Account_(TJ)",
"Total_OBA_Account_(TJ)"
)
final_data
final_data
final_data <- final_data %>% dplyr::mutate(
across(.col = c("Empress",
"McNeill",
"Alberta_BC",
"Gordondale",
"Groundbirch",
"Other",
"Total_Export_Deliveries_(Gross)",
"Intraprovincial",
"Total_Storage_+_Intraprovincial",
"Total_Net_Storage",
"Total_Storage_Deliveries",
"Total_Storage_Receipts",
"Total_NGTL_Deliveries",
"Total_NGTL_Receipts",
"NGTL_Field_Receipts",
"End_of_Day_Linepack",
"Linepack_Rate_of_Change",
"Linepack_Change_(Last_24_Hours)",
"Linepack_Target",
"Total_SD_Account_(TJ)",
"Total_OBA_Account_(TJ)"),
.fns = parse_number))
# Gathering Historical Data
start <- as.Date("2018-01-01", format = "%Y-%m-%d")
end <- as.Date("2019-12-31", format = "%Y-%m-%d")
# Initialize an empty data frame to accumulate data
final_data <- data.frame()
theDate <- start
while (theDate <= end) {
url <- paste0("http://www.tccustomerexpress.com/gdsr/GdsrNGTLImperial", format(theDate, "%Y%m%d"), ".htm")
theDate <- theDate + 1
table <- try(read_html(url), silent = TRUE)
if (inherits(table, "try-error")) {
cat("Failed to read the HTML from URL:", url, "\n")
next
}
alltables <- html_table(table, fill = TRUE)
# Find the table with dimensions 34x4
target_table <- NULL
for (i in seq_along(alltables)) {
if (is.data.frame(alltables[[i]]) && nrow(alltables[[i]]) == 34 && ncol(alltables[[i]]) == 4) {
target_table <- alltables[[i]]
break
}
}
# If a table with dimensions 34x4 is found, continue with data manipulation
if (!is.null(target_table)) {
table2 <- target_table %>%
select(X1, X3) %>%
rename(Title = X1, Numbers = X3) %>%
mutate(Date = theDate, A = row_number()) %>%
slice(-c(1, 2, 3, 4, 5, 6, 8, 31, 34)) %>%
select(Date, Title, Numbers) %>%
pivot_wider(names_from = Title, values_from = Numbers)
# Append the data from this iteration to the final_data data frame
final_data <- bind_rows(final_data, table2)
} else {
cat("No table with dimensions 34x4 found for date:", theDate, "\n")
}
}
View(final_data)
View(final_data)
# Gathering Historical Data
start <- as.Date("2018-01-01", format = "%Y-%m-%d")
end <- as.Date("2019-12-31", format = "%Y-%m-%d")
# Initialize an empty data frame to accumulate data
final_data <- data.frame()
theDate <- start
while (theDate <= end) {
url <- paste0("http://www.tccustomerexpress.com/gdsr/GdsrNGTLImperial", format(theDate, "%Y%m%d"), ".htm")
theDate <- theDate + 1
table <- try(read_html(url), silent = TRUE)
if (inherits(table, "try-error")) {
cat("Failed to read the HTML from URL:", url, "\n")
next
}
alltables <- html_table(table, fill = TRUE)
# Find the table with dimensions 34x4
target_table <- NULL
for (i in seq_along(alltables)) {
if (is.data.frame(alltables[[i]]) && nrow(alltables[[i]]) == 34 && ncol(alltables[[i]]) == 4) {
target_table <- alltables[[i]]
break
}
}
# If a table with dimensions 34x4 is found, continue with data manipulation
if (!is.null(target_table)) {
table2 <- target_table %>%
select(X1, X3) %>%
rename(Title = X1, Numbers = X3) %>%
mutate(Date = theDate, A = row_number()) %>%
slice(-c(1, 2, 3, 4, 5, 6, 8, 31, 34)) %>%
select(Date, Title, Numbers) %>%
pivot_wider(names_from = Title, values_from = Numbers)
# Append the data from this iteration to the final_data data frame
final_data <- bind_rows(final_data, table2)
} else {
cat("No table with dimensions 34x4 found for date:", theDate, "\n")
}
}
# Data Wrangling
colnames(final_data) <- c(
"Date",
"Gas_Date",
"Volume_Summary",
"Empress",
"McNeill",
"Alberta_BC",
"Gordondale",
"Groundbirch",
"Other",
"Total_Export_Deliveries_(Gross)",
"Intraprovincial",
"Total_Storage_+_Intraprovincial",
"Total_Net_Storage",
"Total_Storage_Deliveries",
"Total_Storage_Receipts",
"Total_NGTL_Deliveries",
"Total_NGTL_Receipts",
"NGTL_Field_Receipts",
"End_of_Day_Linepack",
"Linepack_Rate_of_Change",
"Linepack_Change_(Last_24_Hours)",
"Linepack_Target",
"Tolerance",
"Tolerance_Last_Changed",
"Total_SD_Account_(TJ)",
"Total_OBA_Account_(TJ)"
)
# Data wrangling - Remove commas, and convert to numeric
final_data <- subset(final_data, select = -c(1))
final_data <- final_data %>% dplyr::mutate(
across(.col = c("Empress",
"McNeill",
"Alberta_BC",
"Gordondale",
"Groundbirch",
"Other",
"Total_Export_Deliveries_(Gross)",
"Intraprovincial",
"Total_Storage_+_Intraprovincial",
"Total_Net_Storage",
"Total_Storage_Deliveries",
"Total_Storage_Receipts",
"Total_NGTL_Deliveries",
"Total_NGTL_Receipts",
"NGTL_Field_Receipts",
"End_of_Day_Linepack",
"Linepack_Rate_of_Change",
"Linepack_Change_(Last_24_Hours)",
"Linepack_Target",
"Total_SD_Account_(TJ)",
"Total_OBA_Account_(TJ)"),
.fns = parse_number))
# Change from character to date
final_data$Gas_Date <- ymd(final_data$Gas_Date)
# Getting data ready for graphing
final_data <- final_data %>% dplyr::mutate(Year = year(final_data$Gas_Date)) %>%
dplyr::mutate(Month = month(final_data$Gas_Date)) %>%
relocate(Month) %>%
relocate(Year)
final_data
tail(final_data)
library(dplyr)
# Assuming your final_data is a data frame
# Create an empty list to store filtered and renamed data frames
empress_list <- list()
# Define the years for which you want to filter and rename
years <- c(2018, 2019)
# Loop through each year
for (year in years) {
# Filter and rename columns for the current year
emp_df <- final_data %>%
filter(Year == as.character(year)) %>%
select(Gas_Date, Empress) %>%
rename(!!paste0("Empress_", year) := Empress)
# Append the result to the list
empress_list[[as.character(year)]] <- emp_df
}
# Combine the list of data frames into a single data frame
combined_data <- bind_cols(empress_list)
Empress_2018
Empress_2018 <- final_data %>% dplyr::filter(Year == "2018") %>%
dplyr::select(Gas_Date, Empress) %>%
dplyr::rename(Empress_2018 = Empress)
Empress_2018
Empress_2019 <- final_data %>% dplyr::filter(Year == "2019") %>%
dplyr::select(Empress) %>%
dplyr::rename(Empress_2019 = Empress)
Empress_2019
final_data
# Gathering Historical Data
start <- as.Date("2018-01-01", format = "%Y-%m-%d")
end <- as.Date("2020-01-31", format = "%Y-%m-%d")
# Initialize an empty data frame to accumulate data
final_data <- data.frame()
theDate <- start
while (theDate <= end) {
url <- paste0("http://www.tccustomerexpress.com/gdsr/GdsrNGTLImperial", format(theDate, "%Y%m%d"), ".htm")
theDate <- theDate + 1
table <- try(read_html(url), silent = TRUE)
if (inherits(table, "try-error")) {
cat("Failed to read the HTML from URL:", url, "\n")
next
}
alltables <- html_table(table, fill = TRUE)
# Find the table with dimensions 34x4
target_table <- NULL
for (i in seq_along(alltables)) {
if (is.data.frame(alltables[[i]]) && nrow(alltables[[i]]) == 34 && ncol(alltables[[i]]) == 4) {
target_table <- alltables[[i]]
break
}
}
# If a table with dimensions 34x4 is found, continue with data manipulation
if (!is.null(target_table)) {
table2 <- target_table %>%
select(X1, X3) %>%
rename(Title = X1, Numbers = X3) %>%
mutate(Date = theDate, A = row_number()) %>%
slice(-c(1, 2, 3, 4, 5, 6, 8, 31, 34)) %>%
select(Date, Title, Numbers) %>%
pivot_wider(names_from = Title, values_from = Numbers)
# Append the data from this iteration to the final_data data frame
final_data <- bind_rows(final_data, table2)
} else {
cat("No table with dimensions 34x4 found for date:", theDate, "\n")
}
}
# Data Wrangling
colnames(final_data) <- c(
"Date",
"Gas_Date",
"Volume_Summary",
"Empress",
"McNeill",
"Alberta_BC",
"Gordondale",
"Groundbirch",
"Other",
"Total_Export_Deliveries_(Gross)",
"Intraprovincial",
"Total_Storage_+_Intraprovincial",
"Total_Net_Storage",
"Total_Storage_Deliveries",
"Total_Storage_Receipts",
"Total_NGTL_Deliveries",
"Total_NGTL_Receipts",
"NGTL_Field_Receipts",
"End_of_Day_Linepack",
"Linepack_Rate_of_Change",
"Linepack_Change_(Last_24_Hours)",
"Linepack_Target",
"Tolerance",
"Tolerance_Last_Changed",
"Total_SD_Account_(TJ)",
"Total_OBA_Account_(TJ)"
)
# Data wrangling - Remove commas, and convert to numeric
final_data <- subset(final_data, select = -c(1))
final_data <- final_data %>% dplyr::mutate(
across(.col = c("Empress",
"McNeill",
"Alberta_BC",
"Gordondale",
"Groundbirch",
"Other",
"Total_Export_Deliveries_(Gross)",
"Intraprovincial",
"Total_Storage_+_Intraprovincial",
"Total_Net_Storage",
"Total_Storage_Deliveries",
"Total_Storage_Receipts",
"Total_NGTL_Deliveries",
"Total_NGTL_Receipts",
"NGTL_Field_Receipts",
"End_of_Day_Linepack",
"Linepack_Rate_of_Change",
"Linepack_Change_(Last_24_Hours)",
"Linepack_Target",
"Total_SD_Account_(TJ)",
"Total_OBA_Account_(TJ)"),
.fns = parse_number))
# Change from character to date
final_data$Gas_Date <- ymd(final_data$Gas_Date)
# Getting data ready for graphing
final_data <- final_data %>% dplyr::mutate(Year = year(final_data$Gas_Date)) %>%
dplyr::mutate(Month = month(final_data$Gas_Date)) %>%
relocate(Month) %>%
relocate(Year)
final_data
library(dplyr)
# Assuming your final_data is a data frame
# Create an empty list to store filtered and renamed data frames
empress_list <- list()
# Define the years for which you want to filter and rename
years <- c(2018, 2019)
# Loop through each year
for (year in years) {
# Filter and rename columns for the current year
emp_df <- final_data %>%
filter(Year == as.character(year)) %>%
select(Gas_Date, Empress) %>%
rename(!!paste0("Empress_", year) := Empress)
# Append the result to the list
empress_list[[as.character(year)]] <- emp_df
}
# Combine the list of data frames into a single data frame
combined_data <- bind_cols(empress_list)
# View the combined data frame
print(combined_data)
# Create an empty list to store filtered and renamed data frames
empress_list <- list()
# Define the years for which you want to filter and rename
years <- c(2018, 2019)
# Loop through each year
for (year in years) {
# Filter and rename columns for the current year
empress_df <- final_data %>%
filter(Year == as.character(year)) %>%
select(Gas_Date, Empress) %>%
rename_with(~ paste0("Empress_", year), Empress)
# Append the result to the list
empress_list[[as.character(year)]] <- empress_df
}
# Combine the list of data frames into a single data frame
final_empress <- bind_cols(empress_list)
final_empress
empress_df
load("~/fintechtools/data/stocks.rda")
devtools::document()
library(fintechtools)
library(fintechtools)
fintechtools::stocks
fintechtools::multiRegAuto(stocks)
fintechtools::multiRegAuto(stocks)
fintechtools::rollcor(stocks)
fintechtools::rollcor(stocks, 5, 10 , 20)
devtools::document()
library(fintechtools)
fintechtools::multiRegAuto(stocks)
devtools::check_win_release()
devtools::check_win_devel()
devtools::check_mac_release()
usethis::use_r("getreturns")
stocks <- tidyquant::tq_get("GOOG",
get = "stock.prices",
from = "2020-01-01",
to = Sys.Date())
stocks
stocks <- tidyquant::tq_get("GOOG",
get = "stock.prices",
from = "2020-01-01",
to = Sys.Date()) %>%
dplyr::select(symbol, date, adjusted)
stocks
stocks <- tidyquant::tq_get("GOOG",
get = "stock.prices",
from = "2020-01-01",
to = Sys.Date()) %>%
dplyr::select(symbol, date, adjusted) %>%
dplyr::mutate(log(adjusted)/ dplyr::lag(adjusted))
stocks
stocks <- tidyquant::tq_get("GOOG",
get = "stock.prices",
from = "2020-01-01",
to = Sys.Date()) %>%
dplyr::select(symbol, date, adjusted) %>%
dplyr::mutate(log(adjusted)/dplyr::lag(log(adjusted)))
stocks
stocks <- tidyquant::tq_get("GOOG",
get = "stock.prices",
from = "2020-01-01",
to = Sys.Date()) %>%
dplyr::select(symbol, date, adjusted) %>%
dplyr::mutate(log(adjusted)-dplyr::lag((adjusted)))
stocks
devtools::document()
library(fintechtools)
devtools::document()
library(fintechtools)
fintechtools::getreturns("GOOG", from = "2020-01-01", to = Sys.Date(), type = "abs")
tidyquant::tq_get("GOOG", get = 'stock.prices', from = from, to = to) %>%
dplyr::select(date, symbol, adjusted)
devtools::document()
library(fintechtools)
fintechtools::getreturns("GOOG", from = "2020-01-01", to = Sys.Date(), type = "abs")
devtools::document()
library(fintechtools)
fintechtools::getreturns("V", from = "2020-01-01", to = Sys.Date(), type = 'abs')
fintechtools::getreturns("V", from = "2020-01-01", to = Sys.Date(), type = "abs")
devtools::document()
library(fintechtools)
fintechtools::getreturns("V", from = "2020-01-01", to = Sys.Date(), type = "rel")
fintechtools::getreturns("V", from = "2020-01-01", to = Sys.Date(), type = "log")
devtools::document()
library(fintechtools)
fintechtools::getreturns("V", from = "2020-01-01", to = Sys.Date(), type = "rel")
fintechtools::getreturns("V", from = "2020-01-01", to = Sys.Date(), type = "log")
fintechtools::getreturns("V", from = "2020-01-01", to = Sys.Date(), type = "abs")
fintechtools::getreturns("V", from = "2020-01-01", to = Sys.Date(), type = "rel")
devtools::document()
library(fintechtools)
fintechtools::getreturns("V", from = "2020-01-01", to = Sys.Date(), type = "rel")
fintechtools::getreturns("V", from = "2020-01-01", to = Sys.Date(), type = "log")
fintechtools::getreturns("V", from = "2020-01-01", to = Sys.Date(), type = "abs")
